" An example for a vimrc file.
"
" Maintainer:	The Vim Project <https://github.com/vim/vim>
" Last Change:	2023 Aug 10
" Former Maintainer:	Bram Moolenaar <Bram@vim.org>
"
" To use it, copy it to
"	       for Unix:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"	 for MS-Windows:  $VIM\_vimrc
"	      for Haiku:  ~/config/settings/vim/vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings, bail
" out.
if v:progname =~? "evim"
  finish
endif

" Get the defaults that most users want.
source $VIMRUNTIME/defaults.vim

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  if has('persistent_undo')
    set undofile	" keep an undo file (undo changes after closing)
  endif
endif

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
augroup END

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

:match Error /\s\+$/
:2match Error /[^\u0000-\u007f]/

set shiftwidth=2
set smarttab

set number
set relativenumber
set signcolumn=number

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

call plug#begin()
  Plug 'yegappan/lsp'
call plug#end()

let lspOpts = #{autoHighlightDiags: v:true}
autocmd User LspSetup call LspOptionsSet(lspOpts)
let lspServers = [#{
  \ name: 'clang',
  \ filetype: ['c', 'cpp'],
  \ path: '/usr/sbin/clangd',
  \ args: ['--background-index', '--clang-tidy', '-j', '4']
  \ }]
autocmd User LspSetup call LspAddServer(lspServers)

let g:mapleader = "\<Space>"
nnoremap <silent> <Leader>e  :LspDiagCurrent<CR>
nnoremap <silent>         [d :LspDiagPrev<CR>
nnoremap <silent>         ]d :LspDiagNext<CR>
nnoremap <silent> <Leader>f  :LspFormat<CR>
nnoremap <silent>         gr :LspPeekReferences<CR>
nnoremap <silent> <Leader>rn :LspRename<CR>
nnoremap <silent> <Leader>ca :LspCodeAction<CR>
nnoremap <silent>         gD :LspGotoDeclaration<CR>
nnoremap <silent>         gd :LspGotoDefinition<CR>
nnoremap <silent>         K  :LspHover<CR>
